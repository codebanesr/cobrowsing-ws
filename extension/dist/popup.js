(()=>{class e{constructor(){this.setupEventListeners(),this.updateUI(),this.setupMessageListener()}setupEventListeners(){document.getElementById("createRoom").addEventListener("click",()=>{this.createRoom()}),document.getElementById("joinRoom").addEventListener("click",()=>{const e=document.getElementById("roomInput").value.trim();e&&this.joinRoom(e)}),document.getElementById("requestControl").addEventListener("click",()=>{this.requestControl()}),document.getElementById("releaseControl").addEventListener("click",()=>{this.releaseControl()}),document.getElementById("leaveRoom").addEventListener("click",()=>{this.leaveRoom()})}setupMessageListener(){chrome.runtime.onMessage.addListener(e=>{this.handleMessage(e)})}handleMessage(e){switch(e.type){case"connected":this.updateStatus("Connected","connected");break;case"disconnected":this.updateStatus("Disconnected","disconnected"),this.showCreateJoinSection();break;case"controller-changed":this.updateControlButtons(e.isController);break;case"control-released":this.updateControlButtons(!1);break;case"user-joined":case"user-left":this.updateUI()}}async updateUI(){try{const e=await this.getStatus();e.connected?this.updateStatus("Connected","connected"):this.updateStatus("Disconnected","disconnected"),e.roomId?this.showRoomSection(e.roomId,e.isController):this.showCreateJoinSection()}catch(e){console.error("Error updating UI:",e),this.updateStatus("Error","disconnected")}}updateStatus(e,t){const o=document.getElementById("status");o.textContent=e,o.className=`status ${t}`}showCreateJoinSection(){document.getElementById("createSection").style.display="block",document.getElementById("joinSection").style.display="block",document.getElementById("roomSection").style.display="none"}showRoomSection(e,t){document.getElementById("createSection").style.display="none",document.getElementById("joinSection").style.display="none",document.getElementById("roomSection").style.display="block",document.getElementById("roomInfo").textContent=`Room: ${e}`,this.updateControlButtons(t)}updateControlButtons(e){const t=document.getElementById("requestControl"),o=document.getElementById("releaseControl");e?(t.style.display="none",o.style.display="block"):(t.style.display="block",o.style.display="none")}async createRoom(){try{this.setButtonLoading("createRoom",!0),await this.sendMessage({type:"connect"});const e=await this.sendMessage({type:"create-room"});e.success?this.showRoomSection(e.roomId,!0):alert("Failed to create room: "+e.error)}catch(e){alert("Error creating room: "+e.message)}finally{this.setButtonLoading("createRoom",!1)}}async joinRoom(e){try{this.setButtonLoading("joinRoom",!0),await this.sendMessage({type:"connect"});const t=await this.sendMessage({type:"join-room",roomId:e});t.success?this.showRoomSection(e,!1):alert("Failed to join room: "+t.error)}catch(e){alert("Error joining room: "+e.message)}finally{this.setButtonLoading("joinRoom",!1)}}async requestControl(){try{await this.sendMessage({type:"request-control"})}catch(e){alert("Error requesting control: "+e.message)}}async releaseControl(){try{await this.sendMessage({type:"release-control"})}catch(e){alert("Error releasing control: "+e.message)}}async leaveRoom(){try{await this.sendMessage({type:"leave-room"}),this.showCreateJoinSection()}catch(e){alert("Error leaving room: "+e.message)}}setButtonLoading(e,t){const o=document.getElementById(e);if(t)o.disabled=!0,o.textContent="Loading...";else switch(o.disabled=!1,e){case"createRoom":o.textContent="Create Room";break;case"joinRoom":o.textContent="Join Room"}}sendMessage(e){return new Promise(t=>{chrome.runtime.sendMessage(e,t)})}getStatus(){return this.sendMessage({type:"get-status"})}}document.addEventListener("DOMContentLoaded",()=>{new e})})();