new class{constructor(){this.ws=null,this.clientId=null,this.roomId=null,this.isController=!1,this.isConnected=!1,this.setupEventListeners()}setupEventListeners(){chrome.runtime.onMessage.addListener((e,s,t)=>{try{return this.handleMessage(e,s,t),!0}catch(e){return console.error("Error handling message:",e),t({success:!1,error:e.message}),!1}}),this.setupTabListeners()}handleMessage(e,s,t){if(e&&e.type)if(!chrome.runtime.lastError&&chrome.runtime.id)switch(e.type){case"connect":this.connect().then(()=>{t({success:!0,connected:this.isConnected})}).catch(e=>{t({success:!1,error:e.message})});break;case"disconnect":this.disconnect(),t({success:!0});break;case"create-room":this.createRoom().then(e=>{t({success:!0,roomId:e})}).catch(e=>{t({success:!1,error:e.message})});break;case"join-room":this.joinRoom(e.roomId).then(()=>{t({success:!0})}).catch(e=>{t({success:!1,error:e.message})});break;case"leave-room":this.leaveRoom(),t({success:!0});break;case"request-control":this.requestControl(),t({success:!0});break;case"release-control":this.releaseControl(),t({success:!0});break;case"get-status":t({connected:this.isConnected,roomId:this.roomId,isController:this.isController,clientId:this.clientId});break;case"sync-event":this.sendSyncEvent(e.eventType,e.data),t({success:!0})}else console.log("Extension context invalidated");else t({success:!1,error:"Invalid message format"})}async connect(){if(!this.isConnected)return new Promise((e,s)=>{try{this.ws=new WebSocket("ws://localhost:8080"),this.ws.onopen=()=>{this.isConnected=!0,console.log("Connected to co-browsing server"),e()},this.ws.onclose=()=>{this.isConnected=!1,this.clientId=null,this.roomId=null,this.isController=!1,console.log("Disconnected from co-browsing server"),this.notifyPopup({type:"disconnected"})},this.ws.onerror=e=>{console.error("WebSocket error:",e),s(new Error("Failed to connect to server"))},this.ws.onmessage=e=>{try{const s=JSON.parse(e.data);s&&"object"==typeof s&&this.handleServerMessage(s)}catch(e){console.error("Error parsing WebSocket message:",e)}}}catch(e){s(e)}})}disconnect(){this.ws&&(this.ws.close(),this.ws=null),this.isConnected=!1,this.clientId=null,this.roomId=null,this.isController=!1}async createRoom(){return this.isConnected||await this.connect(),new Promise((e,s)=>{const t=setTimeout(()=>{s(new Error("Timeout creating room"))},5e3),o=this.ws.onmessage;this.ws.onmessage=s=>{const n=JSON.parse(s.data);"room-created"===n.type?(clearTimeout(t),this.ws.onmessage=o,this.roomId=n.roomId,this.isController=n.isController,this.notifyContentScripts(),e(n.roomId)):o(s)},this.ws.send(JSON.stringify({type:"create-room"}))})}async joinRoom(e){return this.isConnected||await this.connect(),new Promise((s,t)=>{const o=setTimeout(()=>{t(new Error("Timeout joining room"))},5e3),n=this.ws.onmessage;this.ws.onmessage=e=>{const r=JSON.parse(e.data);"joined-room"===r.type?(clearTimeout(o),this.ws.onmessage=n,this.roomId=r.roomId,this.isController=r.isController,this.notifyContentScripts(),s()):"error"===r.type?(clearTimeout(o),this.ws.onmessage=n,t(new Error(r.message))):n(e)},this.ws.send(JSON.stringify({type:"join-room",roomId:e}))})}leaveRoom(){this.roomId=null,this.isController=!1,this.notifyPopup({type:"left-room"})}requestControl(){this.ws&&this.roomId&&this.ws.send(JSON.stringify({type:"request-control"}))}releaseControl(){this.ws&&this.roomId&&this.ws.send(JSON.stringify({type:"release-control"}))}sendSyncEvent(e,s){this.ws&&this.roomId&&this.isController&&this.ws.send(JSON.stringify({type:"sync-event",eventType:e,data:s}))}handleServerMessage(e){switch(e.type){case"connected":this.clientId=e.clientId,this.notifyPopup({type:"connected",clientId:e.clientId});break;case"controller-changed":this.isController=e.controllerId===this.clientId,this.notifyPopup({type:"controller-changed",isController:this.isController}),this.notifyContentScripts();break;case"control-released":this.isController=!1,this.notifyPopup({type:"control-released"}),this.notifyContentScripts();break;case"sync-event":this.handleSyncEvent(e);break;case"user-joined":case"user-left":this.notifyPopup(e)}}async handleSyncEvent(e){if(this.isController)return;const s=await chrome.tabs.query({active:!0,currentWindow:!0});if(s[0])try{await chrome.tabs.sendMessage(s[0].id,{type:"apply-sync-event",eventType:e.eventType,data:e.data})}catch(e){console.log("Could not send sync event to tab:",e.message)}}notifyPopup(e){chrome.runtime.sendMessage(e).catch(()=>{})}async notifyContentScripts(){try{const e=await chrome.tabs.query({});for(const s of e)try{await chrome.tabs.sendMessage(s.id,{type:"set-controller",isController:this.isController,isActive:null!==this.roomId})}catch(e){}}catch(e){console.error("Error notifying content scripts:",e)}}setupTabListeners(){chrome.tabs.onUpdated.addListener(async(e,s,t)=>{if("complete"===s.status&&this.isController&&this.roomId&&this.sendSyncEvent("navigation",{url:t.url}),"complete"===s.status&&this.roomId)try{await chrome.tabs.sendMessage(e,{type:"set-controller",isController:this.isController,isActive:null!==this.roomId})}catch(e){}})}};